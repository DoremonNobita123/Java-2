class PrintThread extends Thread {
    private String text;
    private int n;

    public PrintThread(String text, int n) {
        this.text = text;
        this.n = n;
    }

    public void run() {
        for (int i = 0; i < n; i++) {
            System.out.println(text);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        // Create and start threads
        PrintThread thread1 = new PrintThread("COVID19", 10);
        PrintThread thread2 = new PrintThread("LOCKDOWN2020", 20);
        PrintThread thread3 = new PrintThread("VACCINATED2021", 30);

        thread1.start();
        thread2.start();
        thread3.start();

        // Wait for all threads to finish
        try {
            thread1.join();
            thread2.join();
            thread3.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("All threads finished.");
    }
}
#2

class SleepThread extends Thread {
    public SleepThread(String name) {
        super(name);
    }

    public void run() {
        for (int i = 100; i >= 1; i--) {
            try {
                Thread.sleep(6000); // Sleep for 6 seconds
                System.out.println(getName() + ": " + i);
                setName("Thread-" + i); // Change thread name
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        SleepThread thread = new SleepThread("Thread-100");
        thread.start();
    }
}


#3
import java.util.LinkedList;

class SharedBuffer {
    private LinkedList<Integer> buffer = new LinkedList<>();
    private int capacity;

    public SharedBuffer(int capacity) {
        this.capacity = capacity;
    }

    public synchronized void produce(int value) throws InterruptedException {
        while (buffer.size() == capacity) {
            wait(); // Wait if buffer is full
        }
        buffer.add(value);
        System.out.println("Produced: " + value);
        notify(); // Notify consumer that value is produced
    }

    public synchronized int consume() throws InterruptedException {
        while (buffer.isEmpty()) {
            wait(); // Wait if buffer is empty
        }
        int value = buffer.removeFirst();
        System.out.println("Consumed: " + value);
        notify(); // Notify producer that value is consumed
        return value;
    }
}

class Producer extends Thread {
    private SharedBuffer buffer;

    public Producer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    public void run() {
        try {
            for (int i = 1; i <= 10; i++) {
                buffer.produce(i);
                Thread.sleep(1000); // Simulate time taken to produce
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class Consumer extends Thread {
    private SharedBuffer buffer;

    public Consumer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    public void run() {
        try {
            for (int i = 1; i <= 10; i++) {
                int value = buffer.consume();
                Thread.sleep(2000); // Simulate time taken to consume
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        SharedBuffer buffer = new SharedBuffer(1); // Capacity of buffer is 1
        Producer producer = new Producer(buffer);
        Consumer consumer = new Consumer(buffer);

        producer.start();
        consumer.start();
    }
}

#B1
import java.util.Random;

class SumThread extends Thread {
    private int[] array;
    private int startIndex;
    private int endIndex;
    private int sum;

    public SumThread(int[] array, int startIndex, int endIndex) {
        this.array = array;
        this.startIndex = startIndex;
        this.endIndex = endIndex;
    }

    public int getSum() {
        return sum;
    }

    public void run() {
        sum = 0;
        for (int i = startIndex; i < endIndex; i++) {
            sum += array[i];
        }
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        int[] array = generateRandomArray(1000);
        int numThreads = 10;
        SumThread[] threads = new SumThread[numThreads];
        int startIndex, endIndex;
        int sum = 0;

        // Create and start threads
        for (int i = 0; i < numThreads; i++) {
            startIndex = i * 100;
            endIndex = (i + 1) * 100;
            threads[i] = new SumThread(array, startIndex, endIndex);
            threads[i].start();
        }

        // Wait for all threads to finish
        for (SumThread thread : threads) {
            thread.join();
            sum += thread.getSum();
        }

        // Calculate average
        double average = (double) sum / array.length;
        System.out.println("Sum: " + sum);
        System.out.println("Average: " + average);
    }

    private static int[] generateRandomArray(int length) {
        int[] array = new int[length];
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            array[i] = random.nextInt(100); // Generate random integers between 0 and 99
        }
        return array;
    }
}
#B2
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

class SearchThread extends Thread {
    private String searchString;
    private File file;

    public SearchThread(String searchString, File file) {
        this.searchString = searchString;
        this.file = file;
    }

    public void run() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            int lineNumber = 1;
            while ((line = reader.readLine()) != null) {
                if (line.contains(searchString)) {
                    System.out.println("Found in file: " + file.getName() + ", Line: " + lineNumber + ", Content: " + line);
                }
                lineNumber++;
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

public class SimpleSearchEngine {
    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println("Usage: java SimpleSearchEngine <searchString>");
            return;
        }

        String searchString = args[0];
        File folder = new File(".");
        File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".txt"));

        if (files == null || files.length == 0) {
            System.out.println("No text files found in the current directory.");
            return;
        }

        List<SearchThread> threads = new ArrayList<>();

        for (File file : files) {
            SearchThread thread = new SearchThread(searchString, file);
            thread.start();
            threads.add(thread);
        }

        for (SearchThread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
#B3

import java.util.Random;

class NumberGenerator extends Thread {
    public void run() {
        Random random = new Random();
        try {
            while (true) {
                int number = random.nextInt(100); // Generate random integer between 0 and 99
                System.out.println("Generated number: " + number);
                if (number % 2 == 0) {
                    synchronized (Main.lock) {
                        Main.evenNumber = number;
                        Main.evenReady = true;
                        Main.lock.notifyAll(); // Notify waiting threads
                    }
                } else {
                    synchronized (Main.lock) {
                        Main.oddNumber = number;
                        Main.oddReady = true;
                        Main.lock.notifyAll(); // Notify waiting threads
                    }
                }
                Thread.sleep(1000); // Wait for 1 second
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class SquareThread extends Thread {
    public void run() {
        try {
            while (true) {
                synchronized (Main.lock) {
                    while (!Main.evenReady) {
                        Main.lock.wait(); // Wait for even number to be ready
                    }
                    int square = Main.evenNumber * Main.evenNumber;
                    System.out.println("Square of " + Main.evenNumber + ": " + square);
                    Main.evenReady = false;
                }
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class CubeThread extends Thread {
    public void run() {
        try {
            while (true) {
                synchronized (Main.lock) {
                    while (!Main.oddReady) {
                        Main.lock.wait(); // Wait for odd number to be ready
                    }
                    int cube = Main.oddNumber * Main.oddNumber * Main.oddNumber;
                    System.out.println("Cube of " + Main.oddNumber + ": " + cube);
                    Main.oddReady = false;
                }
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class Main {
    public static final Object lock = new Object();
    public static int evenNumber;
    public static boolean evenReady = false;
    public static int oddNumber;
    public static boolean oddReady = false;

    public static void main(String[] args) {
        NumberGenerator numberGenerator = new NumberGenerator();
        SquareThread squareThread = new SquareThread();
        CubeThread cubeThread = new CubeThread();

        numberGenerator.start();
        squareThread.start();
        cubeThread.start();
    }
}
